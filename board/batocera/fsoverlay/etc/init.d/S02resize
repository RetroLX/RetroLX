#!/bin/bash

BOOTCONF="/boot/retrolx-boot.conf"

# only at start
test "$1" != "start" && exit 0

# true if triggers are not available or not set to do so
if ! grep -qE '^[ ]*autoresize[ ]*=[ ]*true[ ]*$' "${BOOTCONF}" && ! grep -qE '^[ ]*format-internal[ ]*=' "${BOOTCONF}"
then
    exit 0
fi

# UI Output with dialog, default colorset
function dialogoutput()
{
    local percent="$1"
    local text="Do not switch off your device, it will reboot once done !"
    dialog --backtitle "RetroLX" --title " Resizing Partition " \
           --mixedgauge "$text" 18 50 "$percent" "${arr[@]}" &>/dev/tty1
}

# Executing parameters and watch background pid
# Changes text messages parsed to dialog --mixedgauge
function textoutput()
{
    local cmd="$3"
    local percent="$2"
    local pid ret
    echo "$cmd" >> /boot/resize.log
    $cmd >> /boot/resize.log 2>&1 &
    ret=$?
    pid=$!
    arr[$1]=7 #msg: In Progress
    dialogoutput "$percent"
    wait $pid
    arr[$1]=$ret #msg: Depends from return value
}

# only when resizing is wanted
if grep -qE '^[ ]*autoresize[ ]*=[ ]*true[ ]*$' "${BOOTCONF}"
then

    # Preparing text arrays
    arr=(
	"Removing trigger............" "Pending"
	"Syncing disk data..........." "Pending"
	"Checking disk table........." "Pending"
	"Resizing partition.........." "Pending"
	"Aligning /userdata.........." "Pending"
	"Checking /userdata.........." "Pending"
	"Resizing /userdata.........." "Pending"
    )

    # --- BEGIN RESIZE ---
    # /userdata partition
    PART=$(batocera-part "share_internal")
    # boot disk
    DISK=$(batocera-part prefix "${PART}")

    # only for ext4
    PARTTYPE=$(blkid "${PART}" | sed -e s+'^.* TYPE="\([^"]*\)\".*'+'\1'+)
    test "${PARTTYPE}" != "ext4" && exit 0

    # fix any minor issues, such as gpt header not at end of disk
    mount -o remount,rw /boot

    # textoutput "Message" "percentage" "command call" 
    for i in 1 3 5 7 9 11 13 15 17 19 21 23 25; do
	case $i in
	    1)  textoutput $i 01 "sleep 0.1";;
	    3)  textoutput $i 10 "sync";;
	    5)  textoutput $i 30 "sgdisk -e ${DISK}";;
	    7)  textoutput $i 40 "sync && partprobe";;
	    # resizepart can't use 100% otherwise problem with GPT copied at the end of the disk/sdcard
	    9)  textoutput $i 45 "parted -s -m ${DISK} resizepart 2 99%";;
	    11) textoutput $i 50 "sync && partprobe";;
	    13) textoutput $i 60 "parted -s -m ${DISK} align-check opt 2";;
	    15) textoutput $i 70 "sync && partprobe";;
	    17) textoutput $i 75 "e2fsck -f -p ${PART}";;
	    19) textoutput $i 80 "sync && partprobe";;
	    21) textoutput $i 85 "resize2fs -f ${PART}";;
	    23) textoutput $i 90 "sync && partprobe";;
	esac
    done
    # remove the trigger
    sed -i -e s+'^[ ]*autoresize'+'#autoresize'+ "${BOOTCONF}" 
    mount -o remount,ro /boot

else
    ###### format internal share #####
    FORMAT_INTERNAL_TYPE=$(grep -E '^[ ]*format-internal[ ]*=.*$' "${BOOTCONF}" | head -1 | sed -e s+"^[ ]*format-internal[ ]*=[ ]*\(.*\)[ ]*$"+"\1"+)
    if test -n "${FORMAT_INTERNAL_TYPE}"
    then
	# Preparing text arrays
	arr=(
	    "Formatting /userdata.........." "Pending"
	)
	PART=$(batocera-part "share_internal")

	# remove the trigger
	mount -o remount,rw /boot

	case "${FORMAT_INTERNAL_TYPE}" in
	    "btrfs")
		textoutput 1 10 "mkfs.btrfs -L SHARE -f ${PART}" # what to do in case of error ? nothing.
		;;
	    "ext4")
		textoutput 1 10 "mkfs.ext4 -L SHARE -q -F -F ${PART}" # what to do in case of error ? nothing.
		;;
	    "exfat")
		textoutput 1 10 "mkfs.exfat -n SHARE ${PART}" # what to do in case of error ? nothing.
		;;
	    *)
		# do nothing
	esac
	sed -i -e s+'^[ ]*format-internal'+'#format-internal'+ "${BOOTCONF}"
	mount -o remount,ro /boot
    fi
fi

#Cleanup, restore screen, set progress of last item to 100%
dialogoutput 100
clear > /dev/tty1
sync
exit 0
